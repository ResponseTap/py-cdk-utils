name: Test and Release

on:
  push:
    branches:
      - main

jobs:
  Linting:
    name: Linting and Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
      - name: Run black --check .
        run: poetry run black --check .
      - name: Run flake8
        run: poetry run flake8 . --exclude=docs/*

  UnitTests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
      - name: Unit Tests
        run: |
          poetry run pytest src/tests/unit --html=test-results/test-results-unit.html --cov=src/lambda_code --cov-report=html:test-results/test-coverage-unit
      - name: Upload Unit Tests results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results-unit
          path: test-results/

  Release:
    name: Package and Release
    needs:
      - Linting
      - UnitTests
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8.x"
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
      - name: Configure Git User
        run: |
          git config --local user.email "engineering@responsetap.com"
          git config --local user.name "GitHub Versioning Action"
      - name: Bump version and tagging
        id: version
        run: |
          poetry run semantic-release version
          poetry version $(grep "version" src/py_cdk_utils/__init__.py | cut -d "'" -f 2 | cut -d '"' -f 2)
          poetry run semantic-release changelog
          git commit -m "refactor(version): Bump version and update changelog" -a
          git push
          echo ::set-output name=release_tag::$(grep "version" src/py_cdk_utils/__init__.py | cut -d "'" -f 2 | cut -d '"' -f 2)
      - name: Create Release with new version
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.release_tag }}
          release_name: ${{ steps.version.outputs.release_tag }}
          draft: false
          prerelease: false
      - name: Build Package
        run: |
          poetry build
      - name: Publish to PyPI
        env:
          PYPI_USERNAME: __token__
          PYPI_PASSWORD: ${{ secrets.PYPI_API_KEY }}
        run: |
          poetry publish -u $PYPI_USERNAME -p $PYPI_PASSWORD
